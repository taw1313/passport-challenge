const AWS = require('aws-sdk')

AWS.config.update({
  region: 'us-east-2',
  endpoing: 'http://localhost:8000'
})

const dynamodb = new AWS.DynamoDB()
const docClient = new AWS.DynamoDB.DocumentClient()

const factoriesTable = {
  TableName: 'Factories',
  KeySchema: [
    { AttributeName: 'factoryId', KeyType: 'HASH' }      //Partition key
  ],
  AttributeDefinitions: [
    { AttributeName: 'factoryId', AttributeType: 'S' }
  ],
  ProvisionedThroughput: {
    ReadCapacityUnits: 10,
    WriteCapacityUnits: 10
  }
}

    // { AttributeName: 'factoryName', KeyType: 'RANGE' }    //Sort key
    // { AttributeName: 'factoryName', AttributeType: 'S' }

module.exports = {
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  createTable: () => {
    return new Promise( (resolve, reject) => {
      dynamodb.createTable(factoriesTable, (err, data) => {
        //
        // Do not reject if the Table already exists
        //
        if ( err && (err.code != 'ResourceInUseException')) {
          reject(err)
        }
        else {
          resolve('AWS DynomoDB table is ready')
        }
      })
    })
  },

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // factoryObj = {
  //   'factoryID': '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e',      // generated by uuid 
  //   'factoryName': 'abc123',
  //   'nodeMinRange': 1,
  //   'nodeMaxRange': 10,000,
  //   'childern': [
  //     {'nodeNum': 357},
  //     {'nodeNum': 23}
  //   ]
  // }
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  createFactory: (factoryObj) => {
    console.log('DEBUG - createFactory() ', factoryObj)
    return new Promise( (resolve, reject) => {
      let params = {
        TableName: factoriesTable.TableName,
        Item: factoryObj
      }
      docClient.put(params, (err, data) => {
        (err) ? reject(err) : resolve(data)
      })
    })
  },

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // queryObj = {
  //   'factoryID': '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e',      // generated by uuid 
  // }
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  readAllFactories: () => {
    return new Promise( (resolve, reject) => {
      let params = {
        TableName: factoriesTable.TableName
      }
      docClient.scan(params, (err, data) => {
        (err) ? reject(err) : resolve(data)
      })
    })
  },

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // queryObj = {
  //   'factoryID': '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e',      // generated by uuid 
  // }
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  readFactory: (queryObj) => {
    return new Promise( (resolve, reject) => {
      let params = {
        TableName: factoriesTable.TableName,
        Key: queryObj
      }
      docClient.get(params, (err, data) => {
        (err) ? reject(err) : resolve(data)
      })
    })
  },

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // queryObj = {
  //   'factoryID': '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e',      // generated by uuid 
  // }
  //
  // --- Update a Factory Name ---
  //   updateObj = {
  //     UpdateExpression: 'set factoryName = :n'
  //     ExpressionAttributeValues: {
  //       ':n':'New Factory Name'
  //      }
  //    }
  //
  // --- Update a Factory to have no Childern ---
  //   updateObj = {
  //     UpdateExpression: 'set childern = :a'
  //     ExpressionAttributeValues: {
  //       ':a':[]
  //     }
  //   }
  //
  // --- Update a Factories' Childern ---
  //   updateObj = {
  //     UpdateExpression: 'set childern = :a'
  //     ExpressionAttributeValues: {
  //       ':a':[
  //         {'nodeNum': 1357},
  //         {'nodeNum': 3865},
  //         {'nodeNum': 883}
  //       ]
  //     }
  //   }
  //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  updateFactory: (queryObj, updateObj) => {
    return new Promise( (resolve, reject) => {
      let params = {
        TableName: factoriesTable.TableName,
        Key: queryObj,
        UpdateExpression: 'set factoryName = :f, nodeMinRange = :n, nodeMaxRange = :x, childern = :a',
        ExpressionAttributeValues: {
          ':f': updateObj.factoryName,
          ':n': updateObj.nodeMinRange,
          ':x': updateObj.nodeMaxRange,
          ':a': updateObj.childern
        },
        ReturnValues: "UPDATED_NEW"
      }

      docClient.update(params, (err, data) => {
        (err) ? reject(err) : resolve(data)
      })
    })
  },

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // queryObj = {
  //   'factoryID': '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e',      // generated by uuid 
  // }
  //
  // --- Delete a Factory Name ---
  // delObj = { null }
  //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  deleteFactory: (queryObj, delObj) => {
    console.log('DEBUG - deleteFactory() ', queryObj, delObj)
    return new Promise( (resolve, reject) => {
      let params = {
        TableName: factoriesTable.TableName,
        Key: queryObj,
        delObj
      }

      docClient.delete(params, (err, data) => {
        (err) ? reject(err) : resolve(data)
      })
    })
  }

}